总则:
1. 连接后的第一个命令,是Hello. 这时候除了对方的地址/端口外,什么信息都不知道.
2. 要防止被技术拦截数据包,所以数据包不能是固定的,可以有固定的规则,但是生成看起来随机的数据.
3. 要考虑兼容性,一定要绝对的向后兼容Hello信令.
4. Hello的返回应该包括了版本信息,要有一个可以兼容的版本策略.
5. 使用同一个邮箱来标识唯一的用户.可以靠支持发邮件方式来验证用户.

安全机制:
	1. 要求:
		a) 没有固定的匹配规则,不能用简单包过滤的方式禁掉.
		b) 兼容性.
		c) 可以支持一个用户有多个不同设备.
		d) 用不对称加密的方式,要可靠.

信令格式:


Hello命令:
	struct THello{
		RandKey,   随机密钥
		EncXMLData 用随机密钥加密后的XML数据,字符串	
		{
			<Version>1</Version>	发起者的版本
			<XML head></XML head>  标准XML头.
			<ID>id</ID>				发起者的ID,也是发起者的公钥.
			<email>a@k.com</email>  发起者的Email,不同设备依靠这个来区别是否是一个用户.
			<Name>name</Name>		发起者的名称
			<Url>1.1.1.1:805</Url>	发起者的地址
			<ServiceList>			发起者支持哪些服务.
				</HttpProxy>
				</FileShare>					
			</ServiceList>
			*删除此项*<PublicKey></PublicKey> 发起者的公钥.(就是ID?)

		}
	}

	struct THelloRsp{
		
	}

问题:
1. 如果是UDP的方式,如何判断一个包是第一个包,还是后面的包?
	对于UDP和TCP的关系,考虑在UDP之上实现TCP.这样逻辑是统一的. 先只考虑TCP的实现.
2. 如何让协议解析拦截程序(GFW)无法判断这是V的协议?
	对于拦截程序的假设:
		拦截者知道协议内容.
3. 先用SSL连接,直接传输XML.