
<!-- saved from url=(0052)http://ace.delos.com/usacotext2?a=7aINa8oIvCq&S=flow -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Network Flow Algorithms
</title>
</head><body bgcolor="#f0f0f0">
<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">
<div style="width:45em;background-color:white;border-style:solid;border-width:1px;padding:1em;">
<table cellspacing="8">
   <tbody><tr><td><img src="./4.2.0 Network Flow Algorithms_files/cowhead2.gif"></td>
       <td>&nbsp;&nbsp;&nbsp;</td>
       <td><b><font size="5">
	<font face="Verdana,Tahoma,sans-serif,Arial,Lucida Sans,Gill Sans">
	Network Flow Algorithms
</font></font></b></td>
   </tr>
</tbody></table>

<h4>Prerequisite</h4>

<ul>

<li>Shortest Path</li>

</ul>

<h4> The Problem </h4>

<p> Given: A direct connected graph with integer weighted arcs,
along with a source node and a sink node.

</p><p> Each arc weight corresponds to the ``capacity'' of that arc.
A flow through the graph is constructed by assigning an integer
amount of ``flow'' to send through each edge such that:

</p><ul>

<li>The flow through each arc is no greater than the arc's capacity.</li>

<li>For each node other than the source and sink, total
flow in is the same as total flow out.</li>

</ul>

<p>
Maximize the total of the weights of the out-arcs of the source
minus the weights of the in-arcs (or the total of the weights of
the in-arcs of the sink minus the weights of the out-arcs).

</p><h5> Example </h5>

<p> Given: The layout of a collection of water pipes, along with
the capacity of each pipe.  Water in these pipes must flow downhill,
so within each pipe, water can only flow in one direction.

</p><p> Calculate the amount of water that can flow from a given start
(the water-purification plant) to a given end (your farm).

</p><h4> The Algorithm  </h4>

<p> The algorithm (greedily) builds the network flow by iteratively
adding flow from the source to the sink.

</p><p> Start with every arc having weight equal to the beginning weight
(The arc weights will correspond to the amount of capacity still
unused in that arc).

</p><p> Given the current graph, find a path from the source to the
sink across arcs that all have non-zero weight in the current graph.
Calculate the maximum flow across this path, call it PathCap.

</p><p> For each arc along the path, reduce the capacity of that arc
by PathCap.  In addition, add the reverse arc (the arc between the
same two nodes, but in the opposite direction) with capacity equal
to PathCap (if the reverse arc already exists, just increase its
capacity).

</p><p> Continue to add paths until none exist.

</p><p> This is guaranteed to terminate because you add at least one
unit of flow each time (since the weights are always integers),
and the flow is strictly monotonically increasing.  The use of an
added reverse arc is equivalent to reducing the flow along that
path.

</p><p> If you are interested in a more detailed analysis of this
algorithm, consult Sedgewick.

</p><p> Here is pseudocode for the algorithm:
<br>
<tt><font size="2"> <br>
&nbsp;1&nbsp;&nbsp;&nbsp;if&nbsp;(source&nbsp;=&nbsp;sink)<br>
&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalflow&nbsp;=&nbsp;Infinity<br>
&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DONE&nbsp;<br><br>
&nbsp;4&nbsp;&nbsp;&nbsp;totalflow&nbsp;=&nbsp;0&nbsp;<br><br>
&nbsp;5&nbsp;&nbsp;&nbsp;while&nbsp;(True)<br>
&nbsp;6&nbsp;#&nbsp;find&nbsp;path&nbsp;with&nbsp;highest&nbsp;capacity&nbsp;from<br>
&nbsp;&nbsp;&nbsp;#&nbsp;source&nbsp;to&nbsp;sink&nbsp;<br>
&nbsp;7&nbsp;#&nbsp;uses&nbsp;a&nbsp;modified&nbsp;djikstra's&nbsp;algorithm<br>
&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;all&nbsp;nodes&nbsp;i<br>
&nbsp;9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevnode(i)&nbsp;=&nbsp;nil<br>
10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flow(i)&nbsp;=&nbsp;0<br>
11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visited(i)&nbsp;=&nbsp;False<br>
12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flow(source)&nbsp;=&nbsp;infinity&nbsp;<br><br>
13&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(True)<br>
14&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxflow&nbsp;=&nbsp;0<br>
15&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxloc&nbsp;=&nbsp;nil&nbsp;<br>
16&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;find&nbsp;the&nbsp;unvisited&nbsp;node&nbsp;with<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;the&nbsp;highest&nbsp;capacity&nbsp;to&nbsp;it<br>
17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;all&nbsp;nodes&nbsp;i<br>
18&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(flow(i)&nbsp;&gt;&nbsp;maxflow&nbsp;AND<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;not&nbsp;visited(i))<br>
19&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxflow&nbsp;=&nbsp;flow(i)<br>
20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxloc&nbsp;=&nbsp;i<br>
21&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(maxloc&nbsp;=&nbsp;nil)<br>
22&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;inner&nbsp;while&nbsp;loop<br>
23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(maxloc&nbsp;=&nbsp;sink)<br>
24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;inner&nbsp;while&nbsp;loop<br>
24a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visited(maxloc)&nbsp;=&nbsp;true<br>
25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;update&nbsp;its&nbsp;neighbors<br>
26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;all&nbsp;neighbors&nbsp;i&nbsp;of&nbsp;maxloc<br>
27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(flow(i)&nbsp;&lt;&nbsp;min(maxflow,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capacity(maxloc,i)))<br>
28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevnode(i)&nbsp;=&nbsp;maxloc<br>
29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flow(i)&nbsp;=&nbsp;min(maxflow,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capacity(maxloc,i))&nbsp;<br><br>
30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(maxloc&nbsp;=&nbsp;nil)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;no&nbsp;path<br>
31&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;outer&nbsp;while&nbsp;loop&nbsp;<br><br>
32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathcapacity&nbsp;=&nbsp;flow(sink)<br>
33&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalflow&nbsp;=&nbsp;totalflow&nbsp;+&nbsp;pathcapacity&nbsp;<br><br>
&nbsp;&nbsp;&nbsp;#&nbsp;add&nbsp;that&nbsp;flow&nbsp;to&nbsp;the&nbsp;network,<br>
&nbsp;&nbsp;&nbsp;#&nbsp;update&nbsp;capacity&nbsp;appropriately<br>
35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curnode&nbsp;=&nbsp;sink<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;for&nbsp;each&nbsp;arc,&nbsp;prevnode(curnode),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;curnode&nbsp;on&nbsp;path:<br>
36&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(curnode&nbsp;!=&nbsp;source)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
38&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextnode&nbsp;=&nbsp;prevnode(curnode)<br>
39&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capacity(nextnode,curnode)&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capacity(nextnode,curnode)&nbsp;-&nbsp;<br>
40&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathcapacity<br>
41&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capacity(curnode,nextnode)&nbsp;=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capacity(curnode,nextnode)&nbsp;+&nbsp;<br>
42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathcapacity<br>
43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curnode&nbsp;=&nbsp;nextnode&nbsp;<br>
</font></tt>

</p><p> Running time of this formulation is O(F M), where F is the
maximum flow and M is the number of arcs.  You will generally
perform much better, as the algorithm adds as much flow as possible
every time.

</p><p> To determine the flow across each arc, compare the starting
capacity with the final capacity.  If the final capacity is less,
the difference is the amount of flow traversing that arc.

</p><p>
This algorithm may create `eddies,' where there is a loop which
does not contribute to the flow itself.

</p><h4>Execution Example</h4>

<p> Consider the following network, where the source is node 5,
and the sink is node 2.

<br><img src="./4.2.0 Network Flow Algorithms_files/flow1.gif"><br>

The path with the highest capacity is {5,1,3,6,2}.

<br><img src="./4.2.0 Network Flow Algorithms_files/flow2a.gif"><br>

The bottleneck arc on this path is 1-&gt;3, which has a capacity of
5.  Thus, reduce all arcs on the path by 5, and add 5 to the capacity
of the reverse arcs (creating the arcs, if necessary).  This gives
the following graph:

<br><img src="./4.2.0 Network Flow Algorithms_files/flow2b.gif"><br>

In the new graph, the path with highest capacity is {5,4,6,2}.

<br><img src="./4.2.0 Network Flow Algorithms_files/flow2c.gif"><br>

The capacity of this path is 3, so once again, reduce the forward
arcs by 3, and increase the reverse arcs by 3.

<br><img src="./4.2.0 Network Flow Algorithms_files/flow2d.gif"><br>

Now the network's maximum capacity path is {5,4,6,3,2}

<br><img src="./4.2.0 Network Flow Algorithms_files/flow2e.gif"><br>

This flow has only a capacity of 1, as the arc from 5 to 4 has
capacity 1.  Once again, update the forward and backwards arcs
appropriately.

<br><img src="./4.2.0 Network Flow Algorithms_files/flow2f.gif"><br>

The resulting graph has no paths from the source to the sink.  The
only nodes reachable from the source node 5 are node 5 itself and
node 1.

<br><img src="./4.2.0 Network Flow Algorithms_files/flow2g.gif"><br>

The algorithm added three flows, the first with capacity 5, the
second with capacity 3, and the last with capacity 1.  Thus, the
maximum flow through the network from node 5 to node 2 is 9.

</p><h4>Extensions</h4>

<p>Network flow problems are very extensible, mostly by playing with the
graph.

</p><p> To extend to the case of undirected graphs, simple expand the
edge as two arcs in opposite directions.

</p><p> If you want to limit the amount of traffic through any node,
split each node into two nodes, an in-node and and out-node.  Put
all the in-arcs into the in-node, and all of the out-arcs out of
the out-node and place an arc from the in-node to the out-node with
capacity equal to the capacity of the node.

</p><p> If you have multiple sources and sinks, create a `virtual
source' and `virtual sink' with arcs from the virtual source to
each of the sources and arcs from each of the sinks to the virtual
sink.  Make each of the added arcs have infinite capacity.

</p><p> If you have arcs with real-valued weights, then this algorithm
is no longer guaranteed to terminate, although it will asymptotically
approach the maximum.

</p><h4>Alternative Problems</h4>

<p> Network flow can also be used to solve other types of problems
that aren't so obvious

</p><h5>Maximum Matching</h5>

<p>Given a two sets of objects (call them A and B), where you want
to `match' as many individual A objects with individual B objects
as possible, subject to the constraint that only certain pairs are
possible (object A1 can be matched with object B3, but not object
B1 or B2).  This is called the `maximum matching' problem.

</p><p> To reformulate this as network flow, create a source and add
an arc with capacity 1 from this source to each A object.  Create
a sink with an arc from each B object to it with capacity 1.  In
addition, if object Ai and Bk may be matched together, add an arc
from Ai to Bk with capacity 1.  Now run the algorithm and determine
which arcs between A objects and B objects are used.

</p><h5> Minimum Cut </h5>

<p> Given a weight undirected graph, what is the set of edges with
minimum total weight such that it separates two given nodes.

</p><p> The minimum total weight is exactly the flow between those two nodes.

</p><p> To determine the path, try removing each edge in increasing
weight order, and seeing if it reduces the network flow (if it
does, it should reduce the flow by the capacity of that edge.  The
first one which does is a member of the minimum cut, iterate on
the graph without that edge.

</p><p> This can be extended to node cuts by the same trick as nodes
with limited capacity.  Directed graphs work using the same trick.
However, it can not solve the problem of finding a so-called `best
match,' where each pairing has a `goodness' value, and you want to
create the matching which has the highest total `goodness.'

</p><h4> Example Problems </h4>

<p> If the problems talks about maximizing the movement or flow of
something from one location to another, it is almost assuredly
maximum flow.  If it talks about trying to separate two items
minimally, it is probably minimum cut.  If it talks about maximizes
the pairing of any sort of thing (person, object, money, whatever),
it is probably maximum matching.

</p><h5>Virus Flow</h5>

<p> You have a computer network, with individual machines connected
together by wires.  Data may flow either direction on the wire.
Unfortunately, a machine on your network has caught a virus, so
you need to separate this machine from your central server to stop
the spread of this virus.  Given the cost of shutting down the
network connection between each pair of machines, calculate the
minimum amount of money which must be spent to separate the
contaminated machine from your server.

</p><p> This is exactly the min cut problem.

</p><h5>Lumberjack Scheduling</h5>

<p> Different types of trees require different techniques to be
employed by lumberjacks for them to harvest the tree properly.
Regardless of the tree or lumberjack, harvest a tree requires 30
minutes.  Given a collection of lumberjacks, and the types of trees
that each one is able to correctly cut down, and a collection of
trees, calculate the maximum number of trees which may be cut down
in the next half hour.

</p><p> Each lumberjack can be paired with each tree of a type that
he/she is able to properly harvest.  Thus, the problem can be solved
using the maximum matching algorithm.

</p><h5>Telecowmunication (USACO Championship 1996)</h5>

<p> Given a group of computers in the field, along with the wires
running between the computers, what is the minimum number of machines
which may crash before two given machines are the network are unable
to communicate?  Assume that the two given machines will not crash.

</p><p> This is equivalent to the minimum node cut problem.  The two
given machines can be arbitrarily labeled the source and sink.
The wires are bidirectional.  Split each node into an in-node and
an out-node, so that we limit the flow through any given machine
to 1.  Now, the maximum flow across this network is equivalent to
the minimum node cut.

</p><p> To actually determine the cut, iterative remove the nodes until
you find one which lowers the capacity of the network.

</p><h5>Science Fair Judging</h5>

<p> A science fair has N categories, and M judges.  Each judge is
willing to judge some subset of the categories, and each category
needs some number of judges.  Each judge is only able to judge one
category at a given science fair.  How many judges can you assign
subject to these constraints?

</p><p> This is very similar to the maximum matching problem, except that each
category can handle possibly more than one judge.  The easiest way to do
this is to increase the capacity of the arcs from categories to the sink
to be the number of judges required.

</p><h5>Oil Pipe Planning</h5>

<p> Given the layout (the capacity of each pipe, and how the pipes
are connected together) of the pipelines in Alaska, and the location
of each of the intersections, you wish to increase the maximum flow
between Juneau and Fairbanks, but you have enough money to only
add one pipe of capacity X.  Moreover, the pipe can only be 10
miles long.  Between which two intersections should this pipe be
added to increase the flow the most?

</p><p> To solve this problem, for each pair of intersections within
10 miles of each other, calculate the increase in the flow between
Juneau and Fairbanks if you add a pipe between the intersections.
Each of these sub-problems is exactly maximum flow.
</p></div><br>
<center>
<a href="http://ace.delos.com/usacogate?a=7aINa8oIvCq">USACO Gateway</a> | <a href="mailto:kolstad@ace.delos.com">Comment or Question</a>
</center>

</font></body></html>